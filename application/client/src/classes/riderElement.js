/**
 * @classdesc Class for storing data about a rider element for an artist for an event.
 */
export class RiderElement{

    /**
     * Controls whether or not the Rider element has been modified. Used for syncing with the database.
     * @type {boolean}
     */
    isModified = false;

    /**
     *
     * @param {int}riderID
     * The ID of the rider element. Generated by the database.
     * @param {int}artistID
     * The ID of the artist associated with the rider.
     * @param {String}status
     * The status of the rider (e.g. "This will be fixed soon")
     * @param {boolean}isDone
     * If the rider is done or not.
     * @param {String}description
     * A description of the artist (e.g. "This artist wants a glass of soda before the show")
     */
    constructor(riderID, artistID, status, isDone, description){
        this.riderID = riderID;
        this.artistID = artistID;
        this.status = status;
        this.isDone = isDone;
        this.description = description;
    }

    static getTestRiderElement(){
        let elementOne = new RiderElement(0, 0, '7.5 hours of drying the cheese before serving', false, "Cheese");
        let elementTwo = new RiderElement(1, 0, null, true, null);
        return [elementOne, elementTwo];
    }
}